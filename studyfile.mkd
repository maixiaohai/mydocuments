#day 1#

##0.familiar with the OS(ubuntu)##

##1.git study##

    git install:

	$sudo apt-get install git-core openssh-server openssh-client
	$sudo apt-get install git-core git-gui git-doc

    initialization of global vars:

	$git config --global user.name="name"
	$git config --global user.email="email"
	$git config --global core.editor emacs

    some basic git command:

    git init
    git statusa
    git add
    git commit
    git branch
    git diff
    git clone:

	$git clone git://github.com/schacon/grit.git

##2.markdown study##

    markdown basic grammar

##3.zsh install

    there r many kinds of shell,zsh is the last one u'll ever need.

    install command: 
   
	$undo apt-get intall zsh

    zsh config:

    TAB command completion

	%autoload -U compinit
	%compinit

    select the prompt:

	%autoload -U promptinit
	%promptinit

    automation of the cd command:

	%setopt autocd

-------------------------------------------------
#day 2

##1.git study##

    try git/code school
    more learn about git basic command
    git merge strategy:fast forward and 递归

##2.underscorejs##

    begin the collection

--------------------------------------------------------------
#day 3#

##1.git study##

	建立本地shell和github的关系:
	首先要建立一个库test，并初始化：

	cd test
	git init

	然后建立本地shell和远程库之间的联系：有两种方法
	第一种http：

	git remote add origin https://github.com/maixiaohai/mydocuments.git

	第二种ssh：

	git remote add origin git@github.com:maixiaohai/mydocuments.git

	第一种方法需要每次都输入github的ursername和password
	第二种方法需要创建密钥，具体方法如下：

	cd ~/.ssh
	ls
	mkdir key_backup
	cp id_rsa* key_backup
	rm id_rsa*
	ssh-keygen -t rsa -C "zhangxu@admaster.com.cn"
	sudo apt-get install xclip
	xclip -sel clip < ~/.ssh/id_rsa.pub

	再进入github粘贴即可。
	设置keygen时，输入enter键（在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为		空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。）	

##2.oh my zsh install##

	automatic install command:
	curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
	cd test
	git remote

##3.git配色##

	%git config --global color.ui true

##4.ruby koans##

	begin,start study of ruby,use irb
	question about Nilclass, NoMethodError
	Hackety Hack(try)

--------------------------------------------------------------------------------------------------------------
#day 4#

##1.git study##

	git clone --bare XX XX 克隆裸库，有什么用？？
	git commit --amend  撤销刚才的提交操作

##2.js##

	“==”和“===”的区别：前者若两边的量类型不同，会自动转换，后者则不

------------------------------------------------------------------------------------------------------------------------------
#day 5#

##1.ruby koans##

	assert  断言，用于测试，发现程序错误。
	assert_equal(expected,actual,[message])  用等号来判定actual和expected是否相等assert
	assert_raise(Exception,...){block}预期block将会引发参数列出的一个异常，如NoMethodError,TypeError,NameError
	assert_match(regexp,string,[message])  预期string符号正则表达式regexp
	assert_respond_to(obj,message,[message])   预期obj能够响应message

	条件语句有三种
	（1）if elsif else end
	（2）unless else end
	（3）case when when else end

	循环体有三种
	（1）while  end
	（2）for in（range）   end
	（3）XX.each do...   end
	处理循环的关键字：break(跳出循环),redo（重复当前循环周期）,next（直接跳到下一个循环周期）,retry（重复整个迭代循环操作）

	Class->Module->Object->nil

	定义属性的4个方法：attr、attr_reader、attr_writer、attr_accessor

	文件所在路径最好不要有中文，否则可能会出现编码错误。

-----------------------------------------------------------------------------------------------------------------
#day 6#

##1.hadoop install##

	需要先安装JAVA

##2.underscorejs##

	（1）_bind方法：改变默认的function中的this的指向。
	例子（自带）：var func=function(greeting){
	//this指向的是bind的第二个参数
	//greeting是bind的第三个参数
	return greeting+':'+this.name
	};

	var newfunc=_.bind(func,{name:'moe'},'hi');

	func();

	（2）_.bindAll方法：将一个对象中所有的成员函数的this都指向这个对象。

---------------------------------------------------------------------------------------------------------------------------------
#day 7#

##hadoop install##

**1.JAVA install 问题，尝试了几种都失败了，最后使用成功的安装代码：**
	
	sudo add-apt-repository ppa:webupd8team/java
	sudo apt-get update(此步会显示什么公钥错误之类的)
	sudo apt-get install oracle-java6-installer
      保存文件jdk-6u43-linux-x64.bin 大概需10多分钟。
      然后显示：
      在处理时有错误发生：
       oracle-java7-installer
       E: Sub-process /usr/bin/dpkg returned an error code (1)
       但是运行java -version，会显示安装成功后的java版本1.6.0_43 (需要注意是使用 Oracle 的 Java 还是 OpenJDK 的 Java。Oracle 的 Java 在执行 java -version 后会显示 HotSpot 字样的。)
       
       配置java环境变量：

	sudo gedit /etc/environment

       在其中添加两行：
       JAVA_HOME=/usr/lib/jvm/java-6-oracle
       CLASSPATH=.:/usr/lib/jvm/java-6-oracle -- CLASSPATH 这个环境变量其实可以不设置的，再者这么设也貌似不太对

**2.ssh install及建立ssh无密码登录本机**

	sudo apt-get install ssh openssh-server
	（1）转换成hadoop用户：
	su - hadoop
	（2）使用rsa方式创建ssh-key
	ssh-keygen -t rsa -P ""
	进入.ssh目录，将id_rsa.pub追加到authorized_keys授权文件（开始没有） 
	cd ~/.ssh
	cat id_rsa.pub >> authorized_keys
	（3）登录localhost及登出
	ssh localhost
	exit

**3.hadoop install**
	
         下载地址：<http://www.fayea.com/apache-mirror/hadoop/common/hadoop-1.0.4/>
          sudo cp hadoop-1.0.4.tar.gz /usr/local
          cd /usr/local
          sudo tar -zxf hadoop-1.0.4.tar.gz
          sudo mv hadoop-1.0.4 hadoop

          将hadoop文件夹属主用户设为hadoop
          sudo chown -R hadoop:hadoop hadoop

           打开文件进行配置
           sudo gedit hadoop/conf/hadoop-env.sh
           去掉#，改为export JAVA_HOME=/usr/lib/jvm/java-6-oracle

            测试代码：
	mkdir input
	cp conf/*.xml input
	bin/hadoop jar hadoop-examples-*.jar grep input output 'dfs[a-z.]+'
	cat output/*

Hadoop 目前使用的是 0.20.X 版本的，1.0.X 和这个版本的 API 会有一部分不兼容，不过问题应该不大。建议将 Hadoop 的 bin 路径加到 $PATH 环境变量中去，以后使用会比较方便。

--------------------------------------------------------------------------------------------------------------------------------
#day 8(2013.3.13)#

##1.MapReduce WordCount##

                     需要注意的问题有两个
                     一个是路径问题，包括所运行的程度带包否；
                     一个是output文件夹在倒数第二步命令时不能存在

	sudo mkdir wordcount_classes
	sudo javac -classpath /usr/local/hadoop/hadoop-core-1.0.4.jar WordCount.java -d wordcount_classes
	此后，wordcount_classes文件夹会发现三个class文件：WordCount.class WordCount$Map.calss  WordCount$Reduce.calss    
	sudo jar cvf wordcount.jar -C wordcount_classes/ .(注意这里有个空格)
                     生成了WordCount.
	sudo mkdir wordcount
	建立文件夹input,以及两个文件file1.txt和file2.txt
	bin/hadoop dfs -ls wordcount/inupt
	bin/hadoop dfs -cat wordcoutn/input/file1.txt
	sudo bin/hadoop jar wordcount.jar org.myorg.WordCount wordcount/input wordcount/output
	bin/hadoop dfs -cat wordcount/output/part-00000

##2.pig install##

	tar -xvf pig-0.10.0.tar.gz 
	在命令行路径上增加pig的二进制目录：
	export PIG_INSTALL=/usr/local/hadoop/pig-0.10.0
	export PATH=$PATH:$PIG_INSTALL/bin

-----------------------------------------------------------------------------------------------------
#day 9(2013.3.14)#

##git flow##

	git flow分支
	主要分支：
	master和develop
	支援性分支：
	Feature(和develop互动),
	release（只修bug，从develop分出来，merge回develop和master）,
	hotfix（从master分支出来，merge回master和develop）

	git flow一些基本命令：
	push一个feature branch到远端：git flow feature publish xiaomai_feature或者git push origin feature/xiaomai_feature
	追踪一个远端的branch：git flow feature track xiaomai_feature或者git checkout -b feature/xiaomai_feature
	删除远端的branch：git push origin :feature/xiaomai_feature

	git flow普通bug流程：
	进入克隆库：cd /git/xxx
	初始化版本流程控制：git checkout -b develop origin/develop
	初始化工作目录：git flow init
	开始创建新的需求分支，目的修改image：git flow feature start editimage（这是项目会自动到feature/editimage上）
	更改代码后，git commit -a -m "XXX"
	会自动完成开发分支合并develop：git flow feature finish editimage
	发布到远程开发分支：git push origin develop

	git flow紧急bug流程from release
	拉回release版本：git pull origin release/v1.0
	切换分支：git chechout release/v1.0
	修改，提交：git commit -a -m "XXX"
	push：git push origin release/v1.0

	git flow 紧急bug流程from master
	更新master分支：git pull origin master
	切换到master分支：git checkout master
	生成一个hotfix分支：git flow hotfix start hfx
	修改，测试，最后拉回分支最新代码：git pull hotfix/hfx
	结束hotfix以供发布：git flow hotfix finish hfx
	发布最终的master分支：git push origin master

-----------------------------------------------------------------------------------------------------------------------
#day 10(2013.3.15)#

##pig latin ref1##

	refrence：<http://pig.apache.org/docs/r0.7.0/piglatin_ref1.html>
	运行模式：
	（1）本地：pig -x local
	grunt>exec xx.pig;等于run xx.pig;
	（2）命令行模式：pig xx.pig
	（3）mapreduce模式，需要设置环境变量，pig直接进入此模式

	常用命令：
	load：read data from the file sys
	store：write output to the file sys
	dump:display output
	desribe:review the schema of a relation
	explain:view the logical, physical, or map reduce execution plans to compute a relation
	illustrate:view the step-by-step execution of a series of statements
	filter:work with tuples or rows of data
	foreach:work with columns of data
	group:group data in a single relation
	cogroup/join:group or join data in two or more relations
	union:merge the contents of two or more relations
	split:partition the contents of a relation into multiple relations
	limit:C = limit A 3（显示A 的前三行）
	ps:dump在多查询中使用会打断处理过程。此时，应该使用store
	-F/-stop_on_failure 参数：一检测到failed job就停下来
	ps：store后如果后面的load和前面的stroe文件有隐式依赖关系，则要在store后加exec；
	
	join的三种用法：
	join xx by xx using 'replicated'(条件：one or more relations are small enough to fit into main memory. )
	join xx by xx using 'skewed'(条件：works with two-table inner join )
	join xx by xx using 'merge'(条件：Both inputs are sorted in *ascending* order of join keys. )

	optimization rules：
	pig -optimizer_off [opt_rule | all]关闭优化命令

	实例1：
	//读取student文件，用,区分，用name和age来做key，形成A
	A = load 'student' using PigStorage(',') as(name:chararray,age:int);
	//对A取name下的值形成B
	B = foreach A generate name;
	dump B;

	实例2：
	//将C分裂成D，如果首列第一个数据为0；成E，如果首列第一个数据为1；
	split C into D if $0==0,E if $0==1;

	实例3：
	//比较A和B的第三个元素是否相等，相等就合并到J中
	J = join A by $2,B by $2;
	
##pig latin ref2##

	complex data type:
	tuple:(19,2)
	bag:{(19,2), (18,1)}
	map:[key#value <, key#value …> ]
	
            
	



	



	

